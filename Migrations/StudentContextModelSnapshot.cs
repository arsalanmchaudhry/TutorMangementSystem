// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TutorMangementSystem.Models;

namespace TutorMangementSystem.Migrations
{
    [DbContext(typeof(StudentContext))]
    partial class StudentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TutorMangementSystem.Models.MemberID", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance");

                    b.Property<DateTime>("CardIssued");

                    b.HasKey("Id");

                    b.ToTable("MemberIDs");
                });

            modelBuilder.Entity("TutorMangementSystem.Models.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("OfficeIMG");

                    b.Property<DateTime>("OpenDate");

                    b.Property<string>("Telephone")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("TutorMangementSystem.Models.OfficeHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CloseTime");

                    b.Property<int>("DayOfWeek");

                    b.Property<int?>("OfficeId");

                    b.Property<int>("OpenTime");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("OfficeHours");
                });

            modelBuilder.Entity("TutorMangementSystem.Models.Register", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AvailiableSince");

                    b.Property<int>("MemberIdId");

                    b.Property<DateTime>("ReservedSince");

                    b.Property<int>("TutorId");

                    b.HasKey("Id");

                    b.HasIndex("MemberIdId");

                    b.HasIndex("TutorId");

                    b.ToTable("Registers");
                });

            modelBuilder.Entity("TutorMangementSystem.Models.Reserve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MemberIDId");

                    b.Property<DateTime>("ReservedDate");

                    b.Property<int>("TutorId");

                    b.HasKey("Id");

                    b.HasIndex("MemberIDId");

                    b.HasIndex("TutorId");

                    b.ToTable("Reserves");
                });

            modelBuilder.Entity("TutorMangementSystem.Models.ReserveOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ReserveOptions");
                });

            modelBuilder.Entity("TutorMangementSystem.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("College")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Major")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("MemberIDId");

                    b.Property<int?>("OfficeId");

                    b.Property<string>("SchoolGradeLevel")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("StudentId");

                    b.HasIndex("MemberIDId");

                    b.HasIndex("OfficeId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("TutorMangementSystem.Models.Tutor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cost");

                    b.Property<int?>("OfficeLocationId");

                    b.Property<int>("ReserveOptionId");

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<string>("TutorIMG");

                    b.Property<string>("TutorName");

                    b.Property<string>("available");

                    b.HasKey("Id");

                    b.HasIndex("OfficeLocationId");

                    b.HasIndex("ReserveOptionId");

                    b.ToTable("Tutors");
                });

            modelBuilder.Entity("TutorMangementSystem.Models.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MemberIDId");

                    b.Property<int?>("TutorId");

                    b.HasKey("Id");

                    b.HasIndex("MemberIDId");

                    b.HasIndex("TutorId");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("TutorMangementSystem.Models.OfficeHours", b =>
                {
                    b.HasOne("TutorMangementSystem.Models.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId");
                });

            modelBuilder.Entity("TutorMangementSystem.Models.Register", b =>
                {
                    b.HasOne("TutorMangementSystem.Models.MemberID", "MemberId")
                        .WithMany()
                        .HasForeignKey("MemberIdId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TutorMangementSystem.Models.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TutorMangementSystem.Models.Reserve", b =>
                {
                    b.HasOne("TutorMangementSystem.Models.MemberID", "MemberID")
                        .WithMany("Reserves")
                        .HasForeignKey("MemberIDId");

                    b.HasOne("TutorMangementSystem.Models.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TutorMangementSystem.Models.Student", b =>
                {
                    b.HasOne("TutorMangementSystem.Models.MemberID", "MemberID")
                        .WithMany()
                        .HasForeignKey("MemberIDId");

                    b.HasOne("TutorMangementSystem.Models.Office", "Office")
                        .WithMany("Students")
                        .HasForeignKey("OfficeId");
                });

            modelBuilder.Entity("TutorMangementSystem.Models.Tutor", b =>
                {
                    b.HasOne("TutorMangementSystem.Models.Office", "OfficeLocation")
                        .WithMany("Tutors")
                        .HasForeignKey("OfficeLocationId");

                    b.HasOne("TutorMangementSystem.Models.ReserveOption", "ReserveOption")
                        .WithMany()
                        .HasForeignKey("ReserveOptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TutorMangementSystem.Models.Wishlist", b =>
                {
                    b.HasOne("TutorMangementSystem.Models.MemberID", "MemberID")
                        .WithMany()
                        .HasForeignKey("MemberIDId");

                    b.HasOne("TutorMangementSystem.Models.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId");
                });
#pragma warning restore 612, 618
        }
    }
}
